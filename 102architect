#!/usr/bin/env python3
import sys
import math

def parse_args(args):
    if "-h" in args:
        print(
        "USAGE\n"
        "./102architect x y transfo1 arg11 [arg12] [transfo2 arg21 [arg22]] ...\n\n"
        "DESCRIPTION\n"
        "x   abscissa of the original point\n"
        "y   ordinate of the original point\n"
        "transfo arg1 [arg2]\n"
        "-t i j  translation along vector (i, j)\n"
        "-z m n  scaling by factors m (x-axis) and n (y-axis)\n"
        "-r d    rotation centered in O by a d degree angle\n"
        "-s d    reflection over the axis passing through O with an inclination angle of d degrees\n"
        )
        exit(0)
    
    if len(args) < 2:
        exit(84)

    try:
        x = float(args[0])
        y = float(args[1])
        transformations = args[2:]
        return x, y, transformations
    except ValueError:
        exit(84)

def translation_matrix(i, j):
    return [
        [1, 0, i],
        [0, 1, j],
        [0, 0, 1]
    ]

def scaling_matrix(m, n):
    return [
        [m, 0, 0],
        [0, n, 0],
        [0, 0, 1]
    ]

def rotation_matrix(d):
    rad = math.radians(d)
    return [
        [math.cos(rad), -math.sin(rad), 0],
        [math.sin(rad), math.cos(rad), 0],
        [0, 0, 1]
    ]

def reflection_matrix(d):
    rad = math.radians(d)
    return [
        [math.cos(2*rad), math.sin(2*rad), 0],
        [math.sin(2*rad), -math.cos(2*rad), 0],
        [0, 0, 1]
    ]

def multiply_matrices(matrix1, matrix2):
    result = []
    for row in matrix1:
        result_row = []
        for col in range(len(matrix2[0])):
            total = sum(row[i] * matrix2[i][col] for i in range(3))
            result_row.append(total)
        result.append(result_row)
    return result

def transform_point(matrix, x, y):
    point = [x, y, 1]
    transformed = [sum(matrix[i][j] * point[j] for j in range(3)) for i in range(3)]
    return transformed[0], transformed[1]

def apply_transformations(x, y, transformations):
    matrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
    i = 0
    while i < len(transformations):
        if transformations[i] == "-t":
            if i + 2 >= len(transformations): 
                exit(84)
            try:
                i_value = int(transformations[i + 1])
                j_value = int(transformations[i + 2])
            except ValueError:
                exit(84)
            current_matrix = translation_matrix(i_value, j_value)
            print(f"Translation along vector ({i_value}, {j_value})")
            x, y = transform_point(current_matrix, x, y)
            matrix = multiply_matrices(current_matrix, matrix)
            i += 3
        elif transformations[i] == "-z":
            if i + 2 >= len(transformations):
                exit(84)
            try:
                m_value = int(transformations[i + 1])
                n_value = int(transformations[i + 2])
            except ValueError:
                exit(84)
            current_matrix = scaling_matrix(m_value, n_value)
            print(f"Scaling by factors {m_value} and {n_value}")
            x, y = transform_point(current_matrix, x, y)
            matrix = multiply_matrices(current_matrix, matrix)
            i += 3
        elif transformations[i] == "-r":
            if i + 1 >= len(transformations):
                exit(84)
            try:
                d_value = int(transformations[i + 1])
            except ValueError:
                exit(84)
            current_matrix = rotation_matrix(d_value)
            print(f"Rotation by a {d_value} degree angle")
            x, y = transform_point(current_matrix, x, y)
            matrix = multiply_matrices(current_matrix, matrix)
            i += 2
        elif transformations[i] == "-s":
            if i + 1 >= len(transformations):
                exit(84)
            try:
                d_value = int(transformations[i + 1])
            except ValueError:
                exit(84)
            current_matrix = reflection_matrix(d_value)
            print(f"Reflection over an axis with an inclination angle of {d_value} degrees")
            x, y = transform_point(current_matrix, x, y)
            matrix = multiply_matrices(current_matrix, matrix)
            i += 2
        else:
            exit(84)
    return matrix, x, y

def main():
    try:
        x, y, transformations = parse_args(sys.argv[1:])
        final_matrix, final_x, final_y = apply_transformations(x, y, transformations)
        for row in final_matrix:
            print(" ".join(f"{val:.2f}" for val in row))
        print(f"({x:.2f}, {y:.2f}) => ({final_x:.2f}, {final_y:.2f})")
    except ValueError:
        exit(84)

if __name__ == "__main__":
    main()
